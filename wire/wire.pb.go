// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wire/wire.proto

/*
Package wire is a generated protocol buffer package.

It is generated from these files:
	wire/wire.proto

It has these top-level messages:
	Handshake1
	Handshake2
	Payload
	Entry
	Manifest
*/
package wire

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import block "github.com/eliothedeman/heath/block"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Send a piece of data so the other side can look up my public key.
type Handshake1 struct {
	RsaPub    []byte           `protobuf:"bytes,1,opt,name=rsa_pub,json=rsaPub,proto3" json:"rsa_pub,omitempty"`
	Signature *block.Signature `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
}

func (m *Handshake1) Reset()                    { *m = Handshake1{} }
func (m *Handshake1) String() string            { return proto.CompactTextString(m) }
func (*Handshake1) ProtoMessage()               {}
func (*Handshake1) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Handshake1) GetRsaPub() []byte {
	if m != nil {
		return m.RsaPub
	}
	return nil
}

func (m *Handshake1) GetSignature() *block.Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

// Respond with a ClearIdentity message that has been encrypted with this public key.
// This will allow the sender of Handshake1 to identify the sender of Handshake2 with our public key.
type Handshake2 struct {
	EncryptedRsaPub []byte           `protobuf:"bytes,1,opt,name=encrypted_rsa_pub,json=encryptedRsaPub,proto3" json:"encrypted_rsa_pub,omitempty"`
	Signature       *block.Signature `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
}

func (m *Handshake2) Reset()                    { *m = Handshake2{} }
func (m *Handshake2) String() string            { return proto.CompactTextString(m) }
func (*Handshake2) ProtoMessage()               {}
func (*Handshake2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Handshake2) GetEncryptedRsaPub() []byte {
	if m != nil {
		return m.EncryptedRsaPub
	}
	return nil
}

func (m *Handshake2) GetSignature() *block.Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Payload struct {
	// Types that are valid to be assigned to Data:
	//	*Payload_Raw
	//	*Payload_PublicKey
	//	*Payload_Transaction
	//	*Payload_Block
	Data isPayload_Data `protobuf_oneof:"data"`
}

func (m *Payload) Reset()                    { *m = Payload{} }
func (m *Payload) String() string            { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()               {}
func (*Payload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isPayload_Data interface {
	isPayload_Data()
}

type Payload_Raw struct {
	Raw []byte `protobuf:"bytes,1,opt,name=raw,proto3,oneof"`
}
type Payload_PublicKey struct {
	PublicKey *block.PublicKey `protobuf:"bytes,2,opt,name=publicKey,oneof"`
}
type Payload_Transaction struct {
	Transaction *block.Transaction `protobuf:"bytes,3,opt,name=transaction,oneof"`
}
type Payload_Block struct {
	Block *block.Block `protobuf:"bytes,4,opt,name=block,oneof"`
}

func (*Payload_Raw) isPayload_Data()         {}
func (*Payload_PublicKey) isPayload_Data()   {}
func (*Payload_Transaction) isPayload_Data() {}
func (*Payload_Block) isPayload_Data()       {}

func (m *Payload) GetData() isPayload_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Payload) GetRaw() []byte {
	if x, ok := m.GetData().(*Payload_Raw); ok {
		return x.Raw
	}
	return nil
}

func (m *Payload) GetPublicKey() *block.PublicKey {
	if x, ok := m.GetData().(*Payload_PublicKey); ok {
		return x.PublicKey
	}
	return nil
}

func (m *Payload) GetTransaction() *block.Transaction {
	if x, ok := m.GetData().(*Payload_Transaction); ok {
		return x.Transaction
	}
	return nil
}

func (m *Payload) GetBlock() *block.Block {
	if x, ok := m.GetData().(*Payload_Block); ok {
		return x.Block
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Payload) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Payload_OneofMarshaler, _Payload_OneofUnmarshaler, _Payload_OneofSizer, []interface{}{
		(*Payload_Raw)(nil),
		(*Payload_PublicKey)(nil),
		(*Payload_Transaction)(nil),
		(*Payload_Block)(nil),
	}
}

func _Payload_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Payload)
	// data
	switch x := m.Data.(type) {
	case *Payload_Raw:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Raw)
	case *Payload_PublicKey:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PublicKey); err != nil {
			return err
		}
	case *Payload_Transaction:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transaction); err != nil {
			return err
		}
	case *Payload_Block:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Block); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Payload.Data has unexpected type %T", x)
	}
	return nil
}

func _Payload_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Payload)
	switch tag {
	case 1: // data.raw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Data = &Payload_Raw{x}
		return true, err
	case 2: // data.publicKey
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(block.PublicKey)
		err := b.DecodeMessage(msg)
		m.Data = &Payload_PublicKey{msg}
		return true, err
	case 3: // data.transaction
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(block.Transaction)
		err := b.DecodeMessage(msg)
		m.Data = &Payload_Transaction{msg}
		return true, err
	case 4: // data.block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(block.Block)
		err := b.DecodeMessage(msg)
		m.Data = &Payload_Block{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Payload_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Payload)
	// data
	switch x := m.Data.(type) {
	case *Payload_Raw:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Raw)))
		n += len(x.Raw)
	case *Payload_PublicKey:
		s := proto.Size(x.PublicKey)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Payload_Transaction:
		s := proto.Size(x.Transaction)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Payload_Block:
		s := proto.Size(x.Block)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Entry struct {
	Id   int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Size int64 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (m *Entry) String() string            { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Entry) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Entry) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type Manifest struct {
	Entries []*Entry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *Manifest) Reset()                    { *m = Manifest{} }
func (m *Manifest) String() string            { return proto.CompactTextString(m) }
func (*Manifest) ProtoMessage()               {}
func (*Manifest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Manifest) GetEntries() []*Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterType((*Handshake1)(nil), "wire.Handshake1")
	proto.RegisterType((*Handshake2)(nil), "wire.Handshake2")
	proto.RegisterType((*Payload)(nil), "wire.Payload")
	proto.RegisterType((*Entry)(nil), "wire.Entry")
	proto.RegisterType((*Manifest)(nil), "wire.Manifest")
}

func init() { proto.RegisterFile("wire/wire.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x5f, 0x6b, 0xe2, 0x40,
	0x10, 0x4f, 0x4c, 0xd4, 0x73, 0x22, 0xe7, 0xb9, 0x2f, 0x17, 0xee, 0x49, 0x82, 0x07, 0x72, 0x07,
	0xc9, 0xe9, 0xc1, 0x7d, 0x00, 0xe1, 0x20, 0x50, 0x0a, 0xb2, 0x6d, 0x5f, 0xfa, 0x22, 0x93, 0x64,
	0x6b, 0x16, 0xe3, 0x26, 0xec, 0x6e, 0x90, 0xf4, 0x7b, 0xf5, 0xfb, 0x95, 0x6c, 0xb4, 0xda, 0x3e,
	0xf6, 0xe5, 0xc7, 0x64, 0x7e, 0x7f, 0x26, 0xc3, 0x0e, 0x4c, 0x8e, 0x5c, 0xb2, 0xa8, 0x85, 0xb0,
	0x92, 0xa5, 0x2e, 0x89, 0xdb, 0xd6, 0x3f, 0xa6, 0x49, 0x51, 0xa6, 0xfb, 0xc8, 0x60, 0x47, 0x04,
	0x0f, 0x00, 0x31, 0x8a, 0x4c, 0xe5, 0xb8, 0x67, 0x4b, 0xf2, 0x1d, 0x86, 0x52, 0xe1, 0xb6, 0xaa,
	0x13, 0xdf, 0x9e, 0xd9, 0x8b, 0x31, 0x1d, 0x48, 0x85, 0x9b, 0x3a, 0x21, 0x21, 0x8c, 0x14, 0xdf,
	0x09, 0xd4, 0xb5, 0x64, 0x7e, 0x6f, 0x66, 0x2f, 0xbc, 0xd5, 0xb7, 0xb0, 0xcb, 0xb9, 0x3b, 0xf7,
	0xe9, 0x45, 0x12, 0xe4, 0x57, 0xb1, 0x2b, 0xf2, 0x0b, 0xa6, 0x4c, 0xa4, 0xb2, 0xa9, 0x34, 0xcb,
	0xb6, 0xef, 0x07, 0x4c, 0xde, 0x08, 0xfa, 0xb9, 0x49, 0x2f, 0x36, 0x0c, 0x37, 0xd8, 0x14, 0x25,
	0x66, 0x84, 0x80, 0x23, 0xf1, 0xd8, 0x25, 0xc7, 0x16, 0x6d, 0x3f, 0xc8, 0x1f, 0x18, 0x55, 0x75,
	0x52, 0xf0, 0xf4, 0x86, 0x35, 0x1f, 0xf2, 0x36, 0xe7, 0x7e, 0x6c, 0xd1, 0x8b, 0x88, 0xfc, 0x03,
	0x4f, 0x4b, 0x14, 0x0a, 0x53, 0xcd, 0x4b, 0xe1, 0x3b, 0xc6, 0x43, 0x4e, 0x9e, 0xfb, 0x0b, 0x13,
	0x5b, 0xf4, 0x5a, 0x48, 0xe6, 0xd0, 0x37, 0x1a, 0xdf, 0x35, 0x8e, 0xf1, 0xc9, 0xb1, 0x6e, 0x31,
	0xb6, 0x68, 0x47, 0xae, 0x07, 0xe0, 0x66, 0xa8, 0x31, 0xf8, 0x0d, 0xfd, 0xff, 0x42, 0xcb, 0x86,
	0x7c, 0x85, 0x1e, 0xcf, 0xcc, 0x3f, 0x3b, 0xb4, 0xc7, 0xdb, 0x25, 0x5c, 0xc5, 0x9f, 0xbb, 0xdd,
	0x1d, 0x6a, 0xea, 0x60, 0x09, 0x5f, 0x6e, 0x51, 0xf0, 0x27, 0xa6, 0x34, 0xf9, 0x09, 0x43, 0x26,
	0xb4, 0xe4, 0x4c, 0xf9, 0xf6, 0xcc, 0x59, 0x78, 0x2b, 0x2f, 0x34, 0x0f, 0x6d, 0xd2, 0xe8, 0x99,
	0x5b, 0xcf, 0x1f, 0x83, 0x1d, 0xd7, 0x79, 0x9d, 0x84, 0x69, 0x79, 0x88, 0x58, 0xc1, 0x4b, 0x9d,
	0xb3, 0x8c, 0x1d, 0x50, 0x44, 0x39, 0x43, 0x9d, 0x9b, 0xeb, 0x48, 0x06, 0xe6, 0x0a, 0xfe, 0xbe,
	0x06, 0x00, 0x00, 0xff, 0xff, 0x72, 0xc2, 0xc9, 0xe1, 0x31, 0x02, 0x00, 0x00,
}
